{"version":3,"sources":["SearchBar.js","Card.js","CardList.js","Scroll.js","ErrorBound.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","searchField","searchChange","className","type","placeholder","onChange","Card","props","alt","src","id","name","email","CardList","robots","cardComponent","map","user","i","key","Scroll","style","overflow","height","children","ErrorBound","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAUeA,EARG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKC,UAAU,OACd,2BAAOA,UAAU,mCAAmCC,KAAK,SAASC,YAAY,gBAAgBC,SAAUJ,MCS5FK,EAZF,SAACC,GACb,OACC,yBAAKL,UAAU,uDACd,yBAAKM,IAAI,QAAQC,IAAG,+BAA0BF,EAAMG,GAAhC,cACpB,6BACC,gCAAMH,EAAMI,KAAZ,KACA,+BAAKJ,EAAMK,MAAX,QCQWC,EAbE,SAAC,GAAiB,IAAdC,EAAa,EAAbA,OACdC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAG/E,OACC,6BACEG,ICAWK,EARA,SAACb,GACf,OACC,yBAAKc,MAAO,CAACC,SAAU,SAAUC,OAAQ,UACvChB,EAAMiB,WCkBKC,E,kDApBd,WAAYlB,GAAQ,IAAD,8BAClB,cAAMA,IACDmB,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SACP,uEAEAG,KAAKvB,MAAMiB,a,GAhBIQ,IAAMC,WC8ChBC,G,wDAvCd,aAAe,IAAD,8BACb,gBAeDC,eAAiB,SAACC,GACjB,EAAKL,SAAS,CAAC/B,YAAYoC,EAAMC,OAAOC,SAfxC,EAAKZ,MAAQ,CACZZ,OAAS,GACTd,YAAa,IAJD,E,gEAQO,IAAD,OACnBuC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACjB,OAAS6B,S,+BAS9B,IAAD,OACFC,EAAiBd,KAAKJ,MAAMZ,OAAO+B,QAAO,SAAAC,GAC/C,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAS,EAAKtB,MAAM1B,YAAY+C,kBAEjE,OACA,yBAAK7C,UAAU,MACd,wBAAIA,UAAU,cAAd,cACA,wBAAIA,UAAU,MAAd,sBACA,kBAAC,EAAD,CAAWD,aAAc6B,KAAKK,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUrB,OAAU8B,W,GAhCPZ,IAAMC,YCIJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.cf12814a.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBar = ({searchField, searchChange}) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input className=\"pa3 bg-lightest-blue ba b--green\" type=\"search\" placeholder=\"search robots\" onChange={searchChange} />\n\t\t</div>\n\t\t)\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt=\"Robot\" src={`https://robohash.org/${props.id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2> {props.name} </h2>\n\t\t\t\t<p> {props.email} </p>\n\t\t\t</div>\n\t\t</div>\n\t\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ( { robots }) => {\n\tconst cardComponent = robots.map((user, i) => {\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t{cardComponent}\n\t\t</div>\n\t);\n}\n\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflow: 'scroll', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBound extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError:true});\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1> Oops. We encountered an error. Sorry. </h1>\n\t\t} else {\n\t\t\treturn this.props.children\n\t\t}\n\t}\n}\n\nexport default ErrorBound;","import React from 'react';\nimport SearchBar from './SearchBar';\nimport CardList from './CardList';\nimport Scroll from './Scroll';\nimport ErrorBound from './ErrorBound';\nimport './App.css';\n\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots : [],\n\t\t\tsearchField: '',\n\t\t}\t\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({robots : users}));\n\n\t}\n\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchField:event.target.value});\n\t}\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t<div className='tc'>\n\t\t\t<h1 className=\"f-headline\"> RoboArmy </h1>\n\t\t\t<h1 className='f1'> Hire Robot Mercs </h1>\n\t\t\t<SearchBar searchChange={this.onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBound>\n\t\t\t\t\t<CardList robots = {filteredRobots} />\n\t\t\t\t</ErrorBound>\n\t\t\t</Scroll>\n\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}